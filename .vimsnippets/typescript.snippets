snippet class
export class ${1:Name} {
constructor(${2:Args}) {}
}
endsnippet 

snippet component
import { Component } from '@angular/core';

@Component({
moduleId: module.id
  selector: '$1',
  templateUrl: '${2:./}.component.html'
  })
export class $3 {
  $4
}
endsnippet

snippet import
import { ${1:Name} } from '${2:location}';
endsnippet

snippet export "Export from"
export { ${1:Thing} } from './${2:file}';
endsnippet	

snippet service "An angular 2 Service"
import { Injectable } from '@angular/core';

@Injectable()
export class ${1:Name}Service {
}
endsnippet

snippet package "A package for the angular seed"
{
  name: '$1',
  path: 'node_modules/$2'
},
endsnippet

snippet actiontypes
export enum $1ActionTypes {
  actiontype$2
}
endsnippet

snippet actiontype
export const `!p snip.rv = t[1].replace(' ', '')` = '[$2] $1'
endsnippet

snippet actionngrx "An ngrx action"
export class $1 implements Action {
  readonly type = $2ActionTypes.$1;

  constructor(${3:public payload: string}) {}
}
endsnippet

snippet effectngrx
  @Effect()
  ${1:effectName}$ = this.actions$.pipe(
    ofType($2),
    mergeMap(action =>
      this.http.post('/auth', action.payload).pipe(
        // If successful, dispatch success action with result
        map(data => ({ type: 'LOGIN_SUCCESS', payload: data })),
        // If request fails, dispatch failed action
        catchError(() => of({ type: 'LOGIN_FAILED' }))
      )
    )
  );
endsnippet
