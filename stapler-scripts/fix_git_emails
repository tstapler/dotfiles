#!/usr/bin/env bash

__ScriptVersion="0.0.1"

#===  FUNCTION  ================================================================
#         NAME:  usage
#  DESCRIPTION:  Display usage information.
#===============================================================================
usage ()
{
  echo "Usage :  $0 [options] [OLD_EMAIL] [NEW_EMAIL]
  fix_emails is a tool to change commiter emails in git

    Options:
    -h|help       Display this message
    -n|name       An updated name to use in the commits
    -f|force      Force the filter branch to be run
    -t|target-dir The directory containing the target git repo
    -v|version    Display script version"

}    # ----------  end of function usage  ----------

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

TARGET_DIR="."
FILTER_OPTS=""

while getopts ":hvn:t:f" opt
do
  case $opt in

  h|help     )  usage; exit 0   ;;
  n|name     )  export NEW_NAME=$OPTARG ;;
  t|target-dir ) TARGET_DIR=$OPTARG;;
  f|force ) FILTER_OPTS="-f";;
  v|version  )  echo "$0 -- Version $__ScriptVersion"; exit 0   ;;

  * )  echo -e "\n  Option does not exist : $OPTARG\n"
      usage; exit 1   ;;

  esac    # --- end of case ---
done
shift $(($OPTIND-1))

if [ "$#" -ne 2 ]; then
  echo "Incorrect number of arguments"
  usage; exit 1
fi

if [ -n "$TARGET_DIR" ]; then
  cd $TARGET_DIR || exit 1
fi

if ! git rev-parse --is-inside-git-dir > /dev/null 2>&1; then
  echo "Command must be run inside of git repository"
  usage; exit 1
fi

export OLD_EMAIL=$1
export NEW_EMAIL=$2

FILTER='$(filter_git_env.py $OLD_EMAIL $NEW_EMAIL)'

VARS_TO_REPLACE='$OLD_EMAIL:$NEW_EMAIL:$NEW_NAME'

FILTER="$(envsubst "$VARS_TO_REPLACE" <<< $FILTER)"

echo $FILTER

git filter-branch $FILTER_OPTS --env-filter '$FILTER' --tag-name-filter cat -- --branches --tags
