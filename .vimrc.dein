" vim:fdm=marker

" dein Plugins {{{

"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=~/.vim/bundle/repos/github.com/Shougo/dein.vim

filetype off
" Required:
if dein#load_state(expand('~/.vim/bundle'))
  call dein#begin(expand('~/.vim/bundle'))

  " Let dein manage dein
  " Required:
  call dein#add('Shougo/dein.vim')
  call dein#add('wsdjeg/dein-ui.vim')
  call dein#add('roxma/nvim-yarp')
  call dein#add('roxma/vim-hug-neovim-rpc')

  " Editing Plugins {{{

  " Code Completion {{{
  call dein#add('Shougo/deoplete.nvim')
  call dein#add('autozimu/LanguageClient-neovim', {'build': 'bash install.sh'})
  call dein#add('Shougo/echodoc.vim')
  " End Code Completion }}}

  " Code Completion Sources {{{
  call dein#add('Shougo/neoinclude.vim')
  call dein#add('Shougo/neco-syntax')
  call dein#add('Shougo/neco-vim')
  call dein#add('zchee/deoplete-go', {'build': 'make'})
  call dein#add('fishbullet/deoplete-ruby')
  call dein#add('carlitux/deoplete-ternjs')
  call dein#add('mhartington/deoplete-typescript')
  call dein#add('tweekmonster/deoplete-clang2')
  call dein#add('slashmili/alchemist.vim')
  call dein#add('ujihisa/neco-look')
  " End Code Completion Sources }}}

  " Snippet Plugins {{{
  call dein#add('SirVer/ultisnips')
  call dein#add('honza/vim-snippets')
  call dein#add('reconquest/snippets')
  call dein#add('chrisgillis/vim-bootstrap3-snippets')
  call dein#add('andrewstuart/vim-kubernetes')
  " End Snippet Plugins }}}

  call dein#add('dhruvasagar/vim-table-mode')
  call dein#add('Chiel92/vim-autoformat')
  call dein#add('Shougo/context_filetype.vim')
  call dein#add('godlygeek/tabular')
  call dein#add('tpope/vim-surround')
  call dein#add('tpope/vim-commentary')
  call dein#add('tpope/vim-speeddating')
  call dein#add('mattn/emmet-vim')
  call dein#add('christoomey/vim-sort-motion')
  call dein#add('jiangmiao/auto-pairs')
  call dein#add('christoomey/vim-titlecase')
  call dein#add('fidian/hexmode')
  call dein#add('glts/vim-radical', {'depends':
        \ [
        \   'google/vim-maktaba',
        \   'glts/vim-magnum'
        \ ]})
  call dein#add('google/vim-maktaba')
  call dein#add('glts/vim-magnum')
  call dein#add('triglav/vim-visual-increment')
  call dein#add('junegunn/fzf')

  " End Editing Plugins }}}

  " Management Plugins {{{

  " Unite Vim {{{
  call dein#add('Shougo/unite.vim')
  call dein#add('kmnk/vim-unite-giti')
  call dein#add('tsukkee/unite-tag')
  call dein#add('tsukkee/unite-help')
  call dein#add('Shougo/unite-outline')
  call dein#add('ujihisa/unite-colorscheme')
  call dein#add('ujihisa/unite-locate')
  call dein#add('tacroe/unite-mark')
  call dein#add('tungd/unite-session')
  " End Unite Vim }}}

  call dein#add('haya14busa/dein-command.vim')
  call dein#add('jceb/vim-orgmode')
  call dein#add('w0rp/ale')
  call dein#add('tpope/vim-fugitive')
  call dein#add('vim-scripts/Merginal')
  call dein#add('junkblocker/patchreview-vim')
  call dein#add('Shougo/vimfiler.vim')
  call dein#add('dbakker/vim-projectroot')
  call dein#add('airblade/vim-gitgutter')
  call dein#add('tpope/vim-repeat')
  call dein#add('mbbill/undotree')
  call dein#add('vim-ctrlspace/vim-ctrlspace')
  call dein#add('ctrlpvim/ctrlp.vim')
  " End Management Plugins }}}

  " Utility Plugins {{{
  call dein#add('Konfekt/FastFold')
  " End Utility Plugins }}}

  " Interface Plugins {{{
  call dein#add('vim-airline/vim-airline')
  call dein#add('vim-airline/vim-airline-themes')
  " colorscheme
  call dein#add('morhetz/gruvbox')
  " Select windows using leader w
  call dein#add('t9md/vim-choosewin')
  " End Interface Plugins }}}

  " Language Specific Plugins {{{
  "
  call dein#add('m-kat/aws-vim')
  " sheerun/vim-polyglot includes a rediculous abount of languages
  " Language packs
  " acpiasl (syntax)
  " ansible (syntax, indent, ftplugin)
  " apiblueprint (syntax, ctags)
  " applescript (syntax, indent)
  " arduino (syntax, indent)
  " asciidoc (syntax)
  " autohotkey (indent)
  " blade (syntax, indent, ftplugin)
  " c++11 (syntax)
  " c/c++ (syntax)
  " caddyfile (syntax, indent, ftplugin)
  " carp (syntax)
  " cjsx (syntax, ftplugin)
  " clojure (syntax, indent, autoload, ftplugin)
  " cmake (syntax, indent)
  " coffee-script (syntax, compiler, indent, autoload, ftplugin)
  " cql (syntax)
  " cryptol (syntax, compiler, ftplugin)
  " crystal (syntax, indent, autoload, ftplugin)
  " csv (syntax, autoload, ftplugin)
  " cucumber (syntax, indent, compiler, ftplugin)
  " cue (syntax)
  " dart (syntax, indent, autoload, ftplugin)
  " dhall (syntax, ftplugin)
  " dlang (syntax, indent)
  " dockerfile (syntax, indent, ftplugin)
  " elixir (syntax, indent, compiler, autoload, ftplugin)
  " elm (syntax, indent, autoload, ftplugin)
  " emberscript (syntax, indent, ftplugin)
  " emblem (syntax, indent, ftplugin)
  " erlang (syntax, indent)
  " ferm (syntax)
  " fish (syntax, indent, compiler, autoload, ftplugin)
  " flatbuffers (syntax)
  " fsharp (syntax, indent)
  " git (syntax, indent, ftplugin)
  " glsl (syntax, indent)
  " gmpl (syntax)
  " gnuplot (syntax)
  " go (syntax, compiler, indent)
  " gradle (compiler)
  " graphql (syntax, indent, autoload, ftplugin, after)
  " haml (syntax, indent, compiler, ftplugin)
  " handlebars (syntax, indent, ftplugin)
  " haproxy (syntax)
  " haskell (syntax, indent, ftplugin)
  " haxe (syntax)
  " hcl (syntax, indent, ftplugin)
  " helm (syntax)
  " hive (syntax, ftplugin)
  " html5 (syntax, indent, autoload, ftplugin)
  " i3 (syntax, ftplugin)
  " idris (syntax, indent, ftplugin)
  " ion (syntax, ftplugin)
  " javascript (syntax, indent, compiler, ftplugin, extras)
  " jenkins (syntax, indent)
  " jinja (syntax, indent)
  " json5 (syntax)
  " json (syntax, indent, ftplugin)
  " jst (syntax, indent)
  " jsx (autoload, after)
  " julia (syntax, indent, autoload, ftplugin)
  " kotlin (syntax, indent, ftplugin)
  " latex (syntax, indent, ftplugin)
  " less (syntax, indent, ftplugin)
  " lilypond (syntax, indent, compiler, ftplugin)
  " livescript (syntax, indent, compiler, ftplugin)
  " llvm (syntax, indent, ftplugin)
  " log (syntax)
  " lua (syntax, indent)
  " mako (syntax, indent, ftplugin)
  " markdown (syntax, indent, ftplugin)
  " mathematica (syntax, ftplugin)
  " mdx (syntax)
  " meson (syntax, indent, ftplugin)
  " moonscript (syntax, indent, ftplugin)
  " nginx (syntax, indent, ftplugin)
  " nim (syntax, compiler, indent)
  " nix (syntax, indent, compiler, ftplugin)
  " objc (ftplugin, syntax, indent)
  " ocaml (syntax, indent, compiler, ftplugin)
  " octave (syntax, indent)
  " opencl (syntax, indent, ftplugin)
  " perl (syntax, indent, ftplugin)
  " pgsql (syntax, indent)
  " php (syntax)
  " plantuml (syntax, indent, ftplugin)
  " pony (syntax, indent, autoload, ftplugin)
  " powershell (syntax, indent, compiler, ftplugin)
  " protobuf (syntax, indent)
  " pug (syntax, indent, ftplugin)
  " puppet (syntax, indent, autoload, ftplugin, ctags)
  " purescript (syntax, indent, ftplugin)
  " python-compiler (compiler, autoload)
  " python-indent (indent)
  " python (syntax)
  " qmake (syntax)
  " qml (syntax, indent, ftplugin)
  " r-lang (syntax)
  " racket (syntax, indent, ftplugin)
  " ragel (syntax)
  " raml (syntax, ftplugin)
  " razor (syntax, indent, ftplugin)
  " reason (syntax, indent)
  " rspec (syntax)
  " rst (syntax, indent, autoload, ftplugin)
  " ruby (syntax, indent, compiler, autoload, ftplugin)
  " rust (syntax, indent, compiler, autoload, ftplugin, ctags)
  " sbt (syntax)
  " scala (syntax, indent, compiler, ftplugin, ctags)
  " scss (syntax, indent, ftplugin)
  " slim (syntax, indent, ftplugin)
  " slime (syntax, indent)
  " smt2 (syntax, autoload, ftplugin)
  " solidity (syntax, indent, ftplugin)
  " stylus (syntax, indent, ftplugin)
  " svelte (syntax, indent)
  " svg-indent (indent)
  " svg (syntax)
  " swift (syntax, indent, compiler, ftplugin, ctags)
  " sxhkd (syntax)
  " systemd (syntax, ftplugin)
  " terraform (syntax, indent, autoload, ftplugin)
  " textile (syntax, ftplugin)
  " thrift (syntax)
  " tmux (syntax, ftplugin)
  " tomdoc (syntax)
  " toml (syntax, ftplugin)
  " tptp (syntax)
  " twig (syntax, indent, ftplugin)
  " typescript (syntax, indent, compiler, ftplugin, ctags)
  " v (syntax, indent, ftplugin)
  " vala (syntax, indent, ftplugin)
  " vbnet (syntax)
  " vcl (syntax)
  " vifm (syntax, autoload, ftplugin)
  " vm (syntax, indent)
  " vue (syntax, indent, ftplugin)
  " xdc (syntax)
  " xls (syntax)
  " xml (syntax)
  " yaml (syntax, ftplugin)
  " yard (syntax)
  " zephir (syntax)
  " zig (syntax, autoload, ftplugin)
  " zinit (syntax)
  call dein#add('sheerun/vim-polyglot')
  call dein#add('editorconfig/editorconfig-vim')

  " End Language Specific Plugins }}}

  " Documentation & Word Processing Plugins {{{

  " Pandoc {{{
  call dein#add('vim-pandoc/vim-pandoc')
  call dein#add('vim-pandoc/vim-pandoc-syntax')
  call dein#add('vim-pandoc/vim-pandoc-after')
  " End Pandoc }}}

  " Distraction Free Writing {{{
  call dein#add('amix/vim-zenroom2')
  call dein#add('junegunn/goyo.vim')
  call dein#add('junegunn/limelight.vim')
  " End Distraction Free Writing }}}

  call dein#add('rhysd/vim-grammarous')
  call dein#add('tpope/vim-abolish')
  call dein#add('jamessan/vim-gnupg')

  " End Documentation & Word Processing Plugins }}}

  " Miscellaneous Plugins {{{
  call dein#add('Shougo/vimproc.vim', {'build' : 'make'})
  call dein#add('xolox/vim-misc')
  call dein#add('mattn/webapi-vim')
  call dein#add('LucHermitte/lh-vim-lib')
  call dein#add('jceb/vim-hier')
  " End Miscellaneous Plugins }}}

endif

" Required:
call dein#end()

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

"End dein Scripts-------------------------

" }}}

" Plugin Mappings {{{

" echodoc Settings {{{
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'
" End ec Settings }}}

"vim-fugitive {{{
  nnoremap <silent> <leader>g :Gstatus<CR>
" End vim-fugitive }}}

" ctrlsf.vim {{{
  nmap     <C-F>f <Plug>CtrlSFPrompt
  vmap     <C-F>f <Plug>CtrlSFVwordPath
  vmap     <C-F>F <Plug>CtrlSFVwordExec
  nmap     <C-F>n <Plug>CtrlSFCwordPath
  nmap     <C-F>p <Plug>CtrlSFPwordPath
  nnoremap <C-F>o :CtrlSFOpen<CR>
  nnoremap <C-F>t :CtrlSFToggle<CR>
  inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
  nmap     <C-F>l <Plug>CtrlSFQuickfixPrompt
  vmap     <C-F>l <Plug>CtrlSFQuickfixVwordPath
  vmap     <C-F>L <Plug>CtrlSFQuickfixVwordExec
" End ctrlsf.vim }}}

" vim-choosewin {{{
  nmap <leader>w <Plug>(choosewin)
" End vim-choosewin }}}

" vim-test {{{
  nmap <silent> <leader>u :TestNearest<CR>
  nmap <silent> <leader>U :TestFile<CR>
" End vim-test }}}

" tagbar {{{
nnoremap <leader>t :TagbarToggle<cr>
" End tagbar }}}

" Unite {{{

" ultisnips {{{
  function! UltiSnipsCallUnite()
    Unite -start-insert -winheight=100 -immediately -no-empty ultisnips
    return ''
  endfunction

  inoremap <silent> <F12> <C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>
  nnoremap <silent> <F12> a<C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>

" End ultisnips }}}

" End Unite }}}

" zenroom2 {{{
nnoremap <silent> <leader>z :Goyo<cr>
" End zenroom2 }}}

" vimfiler {{{
nnoremap <C-e> :VimFilerExplorer<cr>
" End vimfiler }}}

" Radical Vim (Convert Base) {{{
nmap g<C-A> <Plug>RadicalView
xmap g<C-A> <Plug>RadicalView
nmap crd <Plug>RadicalCoerceToDecimal
nmap crx <Plug>RadicalCoerceToHex
nmap cro <Plug>RadicalCoerceToOctal
nmap crb <Plug>RadicalCoerceToBinary

" End Radical Vim (Convert Base) }}}

" Plugin Settings {{{

" grammarout Settings {{{
let g:grammarous#hooks = {}
function! g:grammarous#hooks.on_check(errs) abort
    nmap <buffer>gn <Plug>(grammarous-move-to-next-error)
    nmap <buffer>gp <Plug>(grammarous-move-to-previous-error)
    nmap <buffer>gr <Plug>(grammarous-move-to-info-window)r
    nmap <buffer>gf <Plug>(grammarous-move-to-info-window)f
    nmap <buffer>gR <Plug>(grammarous-move-to-info-window)R
endfunction
function! g:grammarous#hooks.on_reset(errs) abort
    nunmap <buffer>gn
    nunmap <buffer>gp
    nunmap <buffer>gr
    nunmap <buffer>gf
    nunmap <buffer>gR
endfunction
let g:grammarous#disabled_categories = {
            \ 'pandoc' : ['TYPOGRAPHY', 'PUNCTUATION'],
            \ }

" End grammarout Settings }}}

" LanguageClient Settings {{{
" Required for operations modifying multiple buffers like rename.
set hidden

function! s:FindDart() abort
  if executable('dart') | return resolve(exepath('dart')) | endif
  if executable('flutter')
    let l:flutter = resolve(exepath('flutter'))
    let l:flutter_bin = fnamemodify(l:flutter,':h')
    let l:dart = l:flutter_bin.'/cache/dart-sdk/bin/dart'
    if executable(l:dart) | return l:dart | endif
  endif
  echoerr 'Could not find a `dart` executable'
endfunction

function! s:FindCommand() abort
  let l:dart = s:FindDart()
  if type(l:dart) != type('') | return v:null | endif
  let l:bin = fnamemodify(l:dart, ':h')
  let l:snapshot = l:bin.'/snapshots/analysis_server.dart.snapshot'
  if !filereadable(l:snapshot)
    echoerr 'Could not find analysis server snapshot at '.l:snapshot
    return v:null
  endif
  let l:cmd = [l:dart, l:snapshot, '--lsp']
  let l:sdk_root = fnamemodify(l:bin, ':h')
  let l:language_model = l:sdk_root.'/model/lexeme'
  if isdirectory(l:language_model)
    call add(l:cmd, '--completion-model='.l:language_model)
  endif
  if get(g:, 'lsc_dart_enable_log', v:false)
    let l:log_file = tempname()
    call add(l:cmd, '--instrumentation-log-file='.l:log_file)
    echom 'Dart instrumentation log: '.l:log_file
  endif
  return l:cmd
endfunction

let g:LanguageClient_serverCommands = {
      \ 'dart': s:FindCommand(),
			\ 'rust': ['rustup', 'run', 'stable', 'rls'],
			\ 'javascript.jsx': ['javascript-typescript-stdio'],
      \ 'javascript': ['javascript-typescript-stdio'],
			\ 'python': ['pyls'],
      \ 'java': ['jdtls'],
      \ 'go': ['gopls'],
      \ 'kotlin': ['kotlin-language-server'],
			\ 'ruby': ['docker', 'run', '--rm', 'mtsmfm/language_server-ruby'],
      \ 'yaml': ['yaml-language-server', '--stdio'] ,
			\ }

nnoremap <F5> :call LanguageClient_contextMenu()<CR><Paste>
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
" End LanguageClient Settings }}}

" vim-go Settings {{{
  let g:go_term_enabled = 1
  let g:go_template_autocreate = 0
" End vim-go Settings }}}

" Neoformat Settings {{{
nnoremap <silent> <leader>f :Neoformat<CR>
let g:neoformat_run_all_formatters = 1
let g:neoformat_enabled_javascript = ['standard']
let g:neoformat_enabled_python = ['yapf']
" End Neoformat Settings }}}

" bash-support Settings {{{
if exists(g:shell_location)
  let g:BASH_Executable = g:shell_location
endif
" End bash-support Settings }}}

" Dart-Vim Settings {{{
  let g:dart_style_guide = 'yup'
" End Dart-Vim Settings }}}

" UltiSnips Settings {{{
let g:ultisnips_python_style = "google"
" End UltiSnips Settings }}}

" TableMode {{{
" make table both pandoc and github lovable
let g:table_mode_separator = '|'
let g:table_mode_corner = '|'
let g:table_mode_corner_corner = '|'
" End TableMode }}}

" vim-json Settings {{{
let g:vim_json_syntax_conceal = 0
" End vim-json Settings }}}

" Vim Crosshairs Settings {{{
set cursorline
set cursorcolumn
" End Vim Crosshairs Settings }}}

" jedi-vim Settings {{{
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
" End jedi-vim Settings }}}

" ctrlp Settings {{{
if executable("ag")
  let g:ctrlp_user_command = 'ag -l --hidden --nocolor -g ""'
endif
  let g:ctrlp_show_hidden = 1
" End ctrlp Settings }}}
"
"" ctrlspace Settings {{{

if executable("ag")
  let g:CtrlSpaceGlobCommand = 'ag -l --hidden --nocolor -g ""'
endif

let g:CtrlSpaceProjectRootMarkers = ['.projectroot', '.git']
let g:CtrlSpaceLoadLastWorkspaceOnStart = 1
let g:CtrlSpaceSaveWorkspaceOnSwitch = 1
let g:CtrlSpaceSaveWorkspaceOnExit = 1
let g:CtrlSpaceSetDefaultMapping = 1
nnoremap <silent> <C-Space> :CtrlSpace<CR>

" For ctrlspace
set hidden

" End ctrlspace Settings }}}

" Unite Settings {{{
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file,file/new,buffer,te -buffer-name=search -start-insert -auto-preview grep -custom-grep-command file_rec,line', 'matchers', 'matcher_fuzzy')
"
"  " Build the ctrlp function, using projectroot to define the
"  " working directory.
"  function! Unite_ctrlp()
"    execute ':Unite  -buffer-name=files -start-insert -match-input buffer file_rec/async'
"  endfunction
"
"Select Search
if executable('ag')
  " Use ag (the silver searcher)
  " https://github.com/ggreer/the_silver_searcher
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
        \ '-i --hidden --ignore ' .
        \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'' --ignore ''packages'''
  let g:unite_source_grep_recursive_opt = ''
elseif executable('ack-grep')
  " Use ack
  " http://beyondgrep.com/
  let g:unite_source_grep_command = 'ack-grep'
  let g:unite_source_grep_default_opts = '-i --no-heading --no-color -k -H'
  let g:unite_source_grep_recursive_opt = ''
endif

" Unite Options
let g:unite_source_history_yank_enable=1
let g:unite_enable_start_insert=1
let g:unite_ignore_source_files = [ 'packages' ]

" End Unite Settings }}}

" Vimfiler Settings {{{
" Enable file operation commands.
" Edit file by tabedit.
call vimfiler#custom#profile('default', 'context', {
      \ 'safe' : 0
      \ })

" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'

let g:vimfiler_as_default_explorer = 1
" End Vimfiler Settings }}}

" deoplete Settings {{{
if has('nvim')
  let g:deoplete#sources#jedi#show_docstring = 1

  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  " Use smartcase.
  let g:deoplete#enable_smart_case = 1


  " deoplete-go Settings {{{
  let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
  let g:deoplete#sources#go#json_directory = ' ~/.cache/deoplete/go/$GOOS_$GOARCH'
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  let g:deoplete#sources#go#use_cache = 1
  " End deoplete-go Settings }}}

  " deoplete-ternjs Settings {{{
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = 0  " This do disable full signature type on autocomplete
  " End deoplete-ternjs Settings }}}
    let g:elm_detailed_complete = 0

endif

" End deoplete Settings }}}

"Airline Settings {{{
let g:airline#extensions#virtualenv#enabled = 1
let g:airline_exclude_preview = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'

"Colorscheme
colorscheme gruvbox
let g:airline_theme = 'gruvbox'
set background=dark    " Setting dark mode"

" End Airline Settings }}}

" Ag.vim Settings {{{
let g:ag_working_path_mode='r'
" End Ag.vim Settings }}}


" Tagbar Settings {{{
let g:tagbar_type_vimwiki = {
      \ 'ctagstype' : 'wiki',
      \ 'kinds'     : [
      \ 'h:headers'
      \ ]
      \ }
let g:tagbar_type_mkd= {
      \ 'ctagstype' : 'md',
      \ 'kinds' : [
      \ 'h:headings'
      \ ],
      \ 'sort' : 0,
      \ }
let g:tagbar_type_css= {
      \ 'ctagstype' : 'css',
      \ 'kinds' : [
      \ 'c:classes',
      \ 'i:ids',
      \ 't:tags',
      \ 'm:media',
      \ 'f:fonts',
      \ 'k:keyframes'
      \ ],
      \ 'sort' : 0,
      \ }
let g:tagbar_type_html= {
      \ 'ctagstype' : 'html',
      \ 'kinds'     : [
      \ 'i:ids',
      \ 'c:classes',
      \ ]
      \ }
let g:tagbar_type_vhdl = {
      \ 'ctagstype': 'vhdl',
      \ 'kinds' : [
      \'d:prototypes',
      \'b:package bodies',
      \'e:entities',
      \'a:architectures',
      \'t:types',
      \'p:processes',
      \'f:functions',
      \'r:procedures',
      \'c:constants',
      \'T:subtypes',
      \'r:records',
      \'C:components',
      \'P:packages',
      \'l:locals'
      \]
      \}
" End Tagbar Settings }}}

" makeshift Settings {{{
let g:makeshift_chdir = 1
" End makeshift Settings }}}

" Neosnippet Settings {{{
let g:neosnippet#snippets_directory='~/.vimsnippets'
" End Neosnippet Settings }}}

" Pandoc Settings {{{
let g:pandoc#syntax#conceal#use = 0
let g:pandoc#syntax#codeblocks#embeds#langs = ["ruby", "iteratehaskell=lhaskell", "bash=sh", "python", "shell=sh"]
let g:pandoc#syntax#conceal#blacklist = ["block", "codeblock_start", "codeblock_delim"]
let g:pandoc#keyboard#use_default_mappings = 1
let g:pandoc#formatting#mode = "sA"
let g:pandoc#folding#level = 2
let g:pandoc#folding#mode = "relative"
let g:pandoc#after#modules#enabled = ["nrrwrgn", "tablemode", "unite", "neosnippets"]
let g:pandoc#completion#bib#mode = 'citeproc'
let g:pandoc#folding#fold_yaml = 0
let g:pandoc#spell#default_langs = ['en_us']
"Pandoc Syntax
let g:pandoc#syntax#colorcolumn = 1

if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" End Pandoc Settings }}}

" Tex Mode {{{
let g:tex_conceal = "ab"
" End Tex Mode }}}

" Emmet Settings {{{
let g:user_emmet_leader_key='<leader>e'
" End Emmet Settings }}}

" JsDoc Settings {{{
let g:jsdoc_allow_input_prompt = 1
" End JsDoc Settings }}}

" Gutentags Settings {{{
let g:gutentags_cache_dir = "~/.vim"
" End Gutentags Settings }}}

" pymode Settings {{{
let g:pymode_rope_completion = 0
let g:pymode_lint = 0
let g:pymode_rope_regenerate_on_write = 0
" End pymode Settings }}}

" utilisnips {{{

" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<leader>p"
let g:UltiSnipsListSnippets="<leader>l"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:UltiSnipsSnippetsDir = $HOME."/.vimsnippets"

let g:UltiSnipsSnippetDirectories=[
      \ "UltiSips",
      \ $HOME."/.vimsnippets",
      \ $HOME . '/.vim/bundle/snippets/',
      \ $HOME . '/.vim/bundle/aws-vim/snips'
      \ ]

" End utilisnips }}}

"}}}

" Auto Groups {{{
" Dart filetype {{{
  augroup dart
    au Filetype dart BufWritePre * Neoformat
  augroup END
" End Dart filetype }}}

" TableMode {{{
  autocmd FileType markdown TableModeEnable
" End TableMode }}}

" Name cloudformation {{
  augroup cloudformation
    au FileType cloudformation setlocal expandtab tabstop=4 shiftwidth=4
  augroup END
" End cloudformation }}}

" NeoComplete {{{
" if dein#check_install(["Shougo/neocomplete.vim"]) && !has('nvim')
"   augroup pandoc
"     au FileType pandoc NeoCompleteLock
"   augroup END
" endif
" End NeoComplete }}}

" Autoreload .vimrc {{{
augroup myvimrc
  au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" End Autoreload .vimrc }}}
" End Auto Groups }}}
