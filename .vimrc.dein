" vim:fdm=marker

" dein Plugins {{{

"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=~/.vim/bundle/repos/github.com/Shougo/dein.vim

filetype off

" Required:
if dein#load_state(expand('~/.vim/bundle'))
  call dein#begin(expand('~/.vim/bundle'))

  " Let dein manage dein
  " Required:
  call dein#add('Shougo/dein.vim')

  " Editing Plugins {{{

  " Code Completion {{{
  call dein#add('Shougo/deoplete.nvim')
  " End Code Completion }}}

  " Code Completion Sources {{{
  call dein#add('Shougo/neoinclude.vim')
  call dein#add('Shougo/neco-syntax')
  call dein#add('Shougo/neco-vim')
  call dein#add('zchee/deoplete-jedi')
  call dein#add('zchee/deoplete-go', {'build': 'make'})
  call dein#add('fishbullet/deoplete-ruby')
  call dein#add('carlitux/deoplete-ternjs')
  call dein#add('mhartington/deoplete-typescript')
  call dein#add('autozimu/LanguageClient-neovim')
  call dein#add('roxma/nvim-completion-manager')
  " End Code Completion Sources }}}

  " Snippet Plugins {{{
  call dein#add('SirVer/ultisnips')
  call dein#add('honza/vim-snippets')
  call dein#add('chrisgillis/vim-bootstrap3-snippets')
  " End Snippet Plugins }}}

  call dein#add('dhruvasagar/vim-table-mode')
  call dein#add('Chiel92/vim-autoformat')
  call dein#add('Shougo/context_filetype.vim')
  call dein#add('godlygeek/tabular')
  call dein#add('tpope/vim-surround')
  call dein#add('tpope/vim-commentary')
  call dein#add('tpope/vim-speeddating')
  call dein#add('mattn/emmet-vim')
  call dein#add('christoomey/vim-sort-motion')
  call dein#add('jiangmiao/auto-pairs')
  call dein#add('christoomey/vim-titlecase')
  call dein#add('fidian/hexmode')
  call dein#add('glts/vim-radical', {'depends':
        \ [
        \   'google/vim-maktaba',
        \   'glts/vim-magnum'
        \ ]})
  call dein#add('google/vim-maktaba')
  call dein#add('glts/vim-magnum')
  call dein#add('fadein/FIGlet.vim')
  call dein#add('triglav/vim-visual-increment')

  " End Editing Plugins }}}

  " Management Plugins {{{

  " Unite Vim {{{
  " call dein#add('Shougo/unite.vim')
  " call dein#add('kmnk/vim-unite-giti')
  " call dein#add('tsukkee/unite-tag')
  " call dein#add('tsukkee/unite-help')
  " call dein#add('Shougo/unite-outline')
  " call dein#add('ujihisa/unite-colorscheme')
  " call dein#add('ujihisa/unite-locate')
  " call dein#add('tacroe/unite-mark')
  " call dein#add('tungd/unite-session')
  " End Unite Vim }}}

  call dein#add('haya14busa/dein-command.vim')
  call dein#add('jceb/vim-orgmode')
  call dein#add('benekastah/neomake')
  call dein#add('tpope/vim-fugitive')
  call dein#add('junkblocker/patchreview-vim')
  call dein#add('codegram/vim-codereview', {'depends': 'junkblocker/patchreview-vim'})
  call dein#add('mattn/gist-vim')
  call dein#add('Shougo/vimfiler.vim')
  call dein#add('dbakker/vim-projectroot')
  call dein#add('airblade/vim-gitgutter')
  call dein#add('tpope/vim-repeat')
  call dein#add('mbbill/undotree')
  call dein#add('LucHermitte/local_vimrc', {'depends': 'LucHermitte/lh-vim-lib'})
  call dein#add('vim-ctrlspace/vim-ctrlspace')
  " End Management Plugins }}}

  " Utility Plugins {{{
  call dein#add('rking/ag.vim')
  call dein#add('Chun-Yang/vim-action-ag')
  call dein#add('scrooloose/syntastic')
  call dein#add('myint/syntastic-extras')
  call dein#add('tpope/vim-dispatch')
  call dein#add('Konfekt/FastFold')
  call dein#add('janko-m/vim-test')
  call dein#add('dyng/ctrlsf.vim')
  call dein#add('tomtom/tlib_vim')
  call dein#add('sbdchd/neoformat')
  " End Utility Plugins }}}

  " Interface Plugins {{{
  call dein#add('vim-airline/vim-airline')
  call dein#add('vim-airline/vim-airline-themes')
  call dein#add('flazz/vim-colorschemes')
  call dein#add('morhetz/gruvbox')
  call dein#add('t9md/vim-choosewin')
  " End Interface Plugins }}}

  " Language Specific Plugins {{{

  " C/C++ Plugins {{{
  call dein#add('Rip-Rip/clang_complete')
  " End C/C++ Plugins }}}

  " Dart Plugins {{{
  call dein#add('dart-lang/dart-vim-plugin')
  " End Dart Plugins }}}

  " Go Plugins {{{
  call dein#add('fatih/vim-go')
  " End Go }}}

  " Javascript Plugins {{{
  call dein#add('pangloss/vim-javascript')
  call dein#add('ternjs/tern_for_vim')
  call dein#add('jacoborus/vim-jsdoc')
  call dein#add('heavenshell/vim-jsdoc')
  call dein#add('briancollins/vim-jst')
  " End Javascript Plugins }}}

  " PHP Plugins {{{
  call dein#add('spf13/PIV')
  call dein#add('arnaud-lb/vim-php-namespace')
  call dein#add('beyondwords/vim-twig')
  call dein#add('beanworks/vim-phpfmt')
  " End PHP Plugins }}}

  " Python Plugins {{{
  call dein#add('heavenshell/vim-pydocstring')
  "call dein#add('klen/python-mode')
  call dein#add('davidhalter/jedi-vim')
  " End Python Plugins }}}

  " Ruby Plugins {{{
  call dein#add('vim-ruby/vim-ruby')
  " End Ruby Plugins }}}

  " TypeScript Plugins {{{
  call dein#add('HerringtonDarkholme/yats.vim') 
  " End TypeScript Plugins }}}


  call dein#add('elmcast/elm-vim')
  call dein#add('dag/vim-fish')
  call dein#add('plasticboy/vim-markdown')
  call dein#add('vim-scripts/scons.vim')
  call dein#add('tmux-plugins/vim-tmux')
  call dein#add('saltstack/salt-vim')
  call dein#add('pearofducks/ansible-vim')
  call dein#add('vim-scripts/bash-support.vim')
  call dein#add('lervag/vimtex')
  call dein#add('ekalinin/Dockerfile.vim')
  call dein#add('elzr/vim-json')
  call dein#add('groenewege/vim-less')
  call dein#add('tapichu/asm2d-vim')
  call dein#add('sheerun/vim-polyglot')
  call dein#add('endel/flashdevelop.vim', {'depends': ['airblade/vim-rooter', 'tomtom/tlib_vim']})
  call dein#add('cespare/vim-toml')
  call dein#add('chrisbra/csv.vim')
  call dein#add('othree/csscomplete.vim')

  " End Language Specific Plugins }}}

  " Documentation & Word Processing Plugins {{{

  " Pandoc {{{
  call dein#add('vim-pandoc/vim-pandoc')
  call dein#add('vim-pandoc/vim-pandoc-syntax')
  call dein#add('vim-pandoc/vim-pandoc-after')
  " End Pandoc }}}

  " Distraction Free Writing {{{
  call dein#add('amix/vim-zenroom2')
  call dein#add('junegunn/goyo.vim')
  call dein#add('junegunn/limelight.vim')
  " End Distraction Free Writing }}}

  call dein#add('tpope/vim-abolish')
  call dein#add('jamessan/vim-gnupg')
  call dein#add('vim-scripts/DoxygenToolkit.vim')
  call dein#add('johnsyweb/vim-makeshift')

  " End Documentation & Word Processing Plugins }}}

  " Miscellaneous Plugins {{{
  call dein#add('Shougo/vimproc.vim', {'build' : 'make'})
  call dein#add('xolox/vim-misc')
  call dein#add('mattn/webapi-vim')
  call dein#add('LucHermitte/lh-vim-lib')
  call dein#add('jceb/vim-hier')
  " End Miscellaneous Plugins }}}

endif

" Required:
call dein#end()

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

"End dein Scripts-------------------------

" }}}

" Plugin Mappings {{{

" vim-fugitive {{{
  nnoremap <silent> <leader>g :Gstatus<CR>
" End vim-fugitive }}}

" ctrlsf.vim {{{
  nmap     <C-F>f <Plug>CtrlSFPrompt
  vmap     <C-F>f <Plug>CtrlSFVwordPath
  vmap     <C-F>F <Plug>CtrlSFVwordExec
  nmap     <C-F>n <Plug>CtrlSFCwordPath
  nmap     <C-F>p <Plug>CtrlSFPwordPath
  nnoremap <C-F>o :CtrlSFOpen<CR>
  nnoremap <C-F>t :CtrlSFToggle<CR>
  inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
  nmap     <C-F>l <Plug>CtrlSFQuickfixPrompt
  vmap     <C-F>l <Plug>CtrlSFQuickfixVwordPath
  vmap     <C-F>L <Plug>CtrlSFQuickfixVwordExec
" End ctrlsf.vim }}}

" vim-choosewin {{{
  nmap <leader>w <Plug>(choosewin)
" End vim-choosewin }}}

" vim-test {{{
  nmap <silent> <leader>u :TestNearest<CR>
  nmap <silent> <leader>U :TestFile<CR>
" End vim-test }}}

" tagbar {{{
nnoremap <leader>t :TagbarToggle<cr>
" End tagbar }}}

" Unite {{{

" ultisnips {{{
  function! UltiSnipsCallUnite()
    Unite -start-insert -winheight=100 -immediately -no-empty ultisnips
    return ''
  endfunction
  
  inoremap <silent> <F12> <C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>
  nnoremap <silent> <F12> a<C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>
  
" End ultisnips }}}

" End Unite }}}

" zenroom2 {{{
nnoremap <silent> <leader>z :Goyo<cr>
" End zenroom2 }}}

" vimfiler {{{
nnoremap <C-e> :VimFilerExplorer<cr>
" End vimfiler }}}

" neosnippet {{{
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"smap <C-k>     <Plug>(neosnippet_expand_or_jump)
"xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ neosnippet#expandable_or_jumpable() ?
"      \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" Recommended key-mappings.

" End neosnippet }}}

" Radical Vim (Convert Base) {{{
nmap g<C-A> <Plug>RadicalView
xmap g<C-A> <Plug>RadicalView
nmap crd <Plug>RadicalCoerceToDecimal
nmap crx <Plug>RadicalCoerceToHex
nmap cro <Plug>RadicalCoerceToOctal
nmap crb <Plug>RadicalCoerceToBinary

" End Radical Vim (Convert Base) }}}

" ctrl-space {{{
"Fuzzy search like ctrl-p
nnoremap <silent><C-p> :CtrlSpace O<CR>
" End ctrl-space }}}

" }}}

" Plugin Settings {{{

" vim-go Settings {{{
  let g:go_fmt_command = "goimports"
" End vim-go Settings }}}

" Neoformat Settings {{{
nnoremap <silent> <leader>f :Neoformat<CR>
let g:neoformat_run_all_formatters = 1
" End Neoformat Settings }}}

" LanguageClient Settings {{{

" Automatically start language servers.
let g:LanguageClient_autoStart = 0

let g:LanguageClient_serverCommands = {
      \ 'javascript': ['javascript-typescript-langserver'],
      \ 'typescript': ['javascript-typescript-langserver'],
      \ }

nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

" End LanguageClient Settings }}}

" bash-support Settings {{{
if exists(g:shell_location)
  let g:BASH_Executable = g:shell_location
endif
" End bash-support Settings }}}

" Dart-Vim Settings {{{
  let g:dart_style_guide = 'yup'
" End Dart-Vim Settings }}}

" UltiSnips Settings {{{
let g:ultisnips_python_style = "google"
" End UltiSnips Settings }}}

" TableMode {{{
" make table both pandoc and github lovable
let g:table_mode_separator = '|'
let g:table_mode_corner = '|'
let g:table_mode_corner_corner = '|'
" End TableMode }}}

" vim-json Settings {{{
let g:vim_json_syntax_conceal = 0
" End vim-json Settings }}}

" vim-test Settings {{{
let test#strategy = "neovim"
let test#python#runner = 'djangotest'
" End vim-test Settings }}}

" Vim Crosshairs Settings {{{
set cursorline
set cursorcolumn
" End Vim Crosshairs Settings }}}

" jedi-vim Settings {{{
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
" End jedi-vim Settings }}}

" Neomake Settings {{{

" Open Automatically
let g:neomake_open_list = 2

let g:neomake_c_enable_markers=['clang']
let g:neomake_c_clang_args = ["-std=c11", "-Wextra", "-Wall", "-fsanitize=undefined","-g"]
let g:neomake_cpp_enable_markers=['clang']
let g:neomake_cpp_clang_args = ["-std=c++14", "-Wextra", "-Wall", "-fsanitize=undefined","-g"]

let g:neomake_python_pylama_maker = {
      \ 'exe': 'pylama',
      \ 'args': ['--format', 'pep8', '-o','~/.config/pylama/pylama.ini'],
      \ 'errorformat': '%f:%l:%c: %m'
      \ }

let g:neomake_python_isort_maker = {
      \ 'exe': 'isort-lint',
      \ 'errorformat': '%f:%l:%m'
      \ }

let g:neomake_pandoc_proselint_maker = {
      \ 'exe': 'proselint',
      \ 'errorformat': '%f:%l:%c: %m'
      \ }

let g:neomake_pandoc_markdownlint_maker = {
      \ 'exe': 'markdownlint',
      \ 'errorformat': '%f:%l:%c: %m'
      \ }

let g:neomake_pandoc_writegood_maker= {
      \ 'exe': 'write-better',
      \ 'errorformat': '%f:%m\ on line %l at column %c',
      \ }
let g:neomake_pandoc_enabled_makers = ['proselint', 'writegood', 'markdownlint']

let g:neomake_gitcommit_gitlint_maker = {
      \ 'exe': 'gitlint',
      \ 'args': ['-vvv'],
      \ 'error_format': '%m',
      \ 'remove_invalid_entries': 0,
      \ 'append_file': 0
      \ }

let g:neomake_gitcommit_enabled_makers = ['gitlint']

" let g:neomake_ansible_ansiblelint_maker = {
"       \ 'exe': 'ansible-lint',
"       \ 'error_format': '%E[ANSIBLE%n]\ %m,%C%f:%l,%Z%s',
"       \ 'buffer_output': 1
"       \ }
" let g:neomake_ansible_ansiblelint_remove_invalid_entries = 0

" let g:neomake_ansible_enabled_makers = ["ansiblelint"]

let g:neomake_html_enabled_makers = []

let g:win_sep = (has('win32') || has('win64')) ? '/' : ''

let g:dart_efm = '%-GAnalyzing%.%#,[%.%#] %m. (%f\, line %l\, col %c),%-G%.%# error %.%# warnings found.'

let g:neomake_dart_dartanalyzer_maker = {
  \ 'exe': 'dartanalyzer',
  \ 'errorformat':  g:dart_efm
  \ }

let g:neomake_dart_enabled_makers = ['dartanalyzer']

let g:neomake_verbose = 1

" End Neomake Settings }}}

" ctrlspace Settings {{{

if executable("ag")
  let g:CtrlSpaceGlobCommand = 'ag -l --hidden --nocolor -g ""'
endif

let g:CtrlSpaceProjectRootMarkers = ['.projectroot', '.git']
let g:CtrlSpaceLoadLastWorkspaceOnStart = 1
let g:CtrlSpaceSaveWorkspaceOnSwitch = 1
let g:CtrlSpaceSaveWorkspaceOnExit = 1
let g:CtrlSpaceSetDefaultMapping = 1
nnoremap <silent> <C-Space> :CtrlSpace<CR>

" For ctrlspace
set hidden

" End ctrlspace Settings }}}

" Unite Settings {{{
"if dein#check_install(["Shougo/unite.vim"])
"  call unite#filters#matcher_default#use(['matcher_fuzzy'])
"  call unite#filters#sorter_default#use(['sorter_rank'])
"  call unite#custom#source('file,file/new,buffer,te -buffer-name=search -start-insert -auto-preview grep -custom-grep-command file_rec,line', 'matchers', 'matcher_fuzzy')
"
"  " Build the ctrlp function, using projectroot to define the
"  " working directory.
"  function! Unite_ctrlp()
"    execute ':Unite  -buffer-name=files -start-insert -match-input buffer file_rec/async'
"  endfunction
"
"  "Select Search
"  if executable('ag')
"    " Use ag (the silver searcher)
"    " https://github.com/ggreer/the_silver_searcher
"    let g:unite_source_grep_command = 'ag'
"    let g:unite_source_grep_default_opts =
"          \ '-i --hidden --ignore ' .
"          \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'' --ignore ''packages'''
"    let g:unite_source_grep_recursive_opt = ''
"  elseif executable('ack-grep')
"    " Use ack
"    " http://beyondgrep.com/
"    let g:unite_source_grep_command = 'ack-grep'
"    let g:unite_source_grep_default_opts = '-i --no-heading --no-color -k -H'
"    let g:unite_source_grep_recursive_opt = ''
"  endif
"
"  " Unite Options
"  let g:unite_source_history_yank_enable=1
"  let g:unite_enable_start_insert=1
"  let g:unite_ignore_source_files = [ 'packages' ]
"   endif

" End Unite Settings }}}

" Vimfiler Settings {{{
" Enable file operation commands.
" Edit file by tabedit.
" call vimfiler#custom#profile('default', 'context', {
"       \ 'safe' : 0
"       \ })

" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'

let g:vimfiler_as_default_explorer = 1
" End Vimfiler Settings }}}

" deoplete Settings {{{
if has('nvim')
  " neocomplete like
   set completeopt+=noinsert
  " deoplete.nvim recommend
   set completeopt+=noselect

  let g:deoplete#enable_at_startup = 1

  let g:deoplete#sources#jedi#show_docstring = 1

  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  " Use smartcase.
  let g:deoplete#enable_smart_case = 1

  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> deoplete#mappings#smart_close_popup()."\<C-h>"
  inoremap <expr><BS>  deoplete#mappings#smart_close_popup()."\<C-h>"

  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function() abort
    return deoplete#mappings#close_popup() . "\<CR>"
  endfunction

  " for c and c++
  let g:clang_complete_auto = 0
  let g:clang_auto_select = 0
  let g:clang_omnicppcomplete_compliance = 0
  let g:clang_make_default_keymappings = 0
  let g:clang_library_path='/usr/lib/llvm-3.8/lib/libclang-3.8.so.1'
   
  " deoplete-go Settings {{{
  let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
  let g:deoplete#sources#go#json_directory = ' ~/.cache/deoplete/go/$GOOS_$GOARCH'
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  let g:deoplete#sources#go#use_cache = 1
  " End deoplete-go Settings }}}

  " deoplete-ternjs Settings {{{
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = 0  " This do disable full signature type on autocomplete
  " End deoplete-ternjs Settings }}}
    let g:elm_detailed_complete = 0

endif

" End deoplete Settings }}}

"Airline Settings {{{
let g:airline#extensions#virtualenv#enabled = 1
let g:airline_exclude_preview = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'

"Colorscheme
colorscheme gruvbox
let g:airline_theme = 'gruvbox'
set background=dark    " Setting dark mode"

" End Airline Settings }}}

" Ag.vim Settings {{{
let g:ag_working_path_mode='r'
" End Ag.vim Settings }}}

"Syntastic Settings {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_error_symbol = "✗"
let g:syntastic_id_checkers = 1
let g:syntastic_auto_jump = 0
let g:syntastic_quiet_messages = { "level": "warnings" }

let g:syntastic_text_checkers = ['language_check']
let g:syntastic_language_check_args = '--language=en-US'

let g:syntastic_mode_map = { "mode": "passive",
      \ "passive_filetypes": ["dart"] }

let g:syntastic_disabled_filetypes=['python']
"Syntastic Extras Settings
let g:syntastic_make_checkers = ['gnumake']
let g:syntastic_javascript_checkers = ['json_tool']
let g:syntastic_yaml_checkers = ['pyyaml']
let g:syntastic_gitcommit_checkers = ['language_check']
let g:syntastic_svn_checkers = ['language_check']

" End Syntastic Settings }}}

" Tagbar Settings {{{
let g:tagbar_type_vimwiki = {
      \ 'ctagstype' : 'wiki',
      \ 'kinds'     : [
      \ 'h:headers'
      \ ]
      \ }
let g:tagbar_type_mkd= {
      \ 'ctagstype' : 'md',
      \ 'kinds' : [
      \ 'h:headings'
      \ ],
      \ 'sort' : 0,
      \ }
let g:tagbar_type_css= {
      \ 'ctagstype' : 'css',
      \ 'kinds' : [
      \ 'c:classes',
      \ 'i:ids',
      \ 't:tags',
      \ 'm:media',
      \ 'f:fonts',
      \ 'k:keyframes'
      \ ],
      \ 'sort' : 0,
      \ }
let g:tagbar_type_html= {
      \ 'ctagstype' : 'html',
      \ 'kinds'     : [
      \ 'i:ids',
      \ 'c:classes',
      \ ]
      \ }
let g:tagbar_type_vhdl = {
      \ 'ctagstype': 'vhdl',
      \ 'kinds' : [
      \'d:prototypes',
      \'b:package bodies',
      \'e:entities',
      \'a:architectures',
      \'t:types',
      \'p:processes',
      \'f:functions',
      \'r:procedures',
      \'c:constants',
      \'T:subtypes',
      \'r:records',
      \'C:components',
      \'P:packages',
      \'l:locals'
      \]
      \}
" End Tagbar Settings }}}

" GitGutter Settings {{{
let g:gitgutter_max_signs = 1000
" End GitGutter Settings }}}

" Vim-Javascript Settings {{{
let g:javascript_enable_domhtmlcss = 1
let g:javascript_plugin_jsdoc = 1
" End Vim-Javascript Settings }}}

" clang-format Settings {{{
let g:clang_format#style_options = {
      \ "AccessModifierOffset" : -2,
      \ "AllowShortIfStatementsOnASingleLine" : "true",
      \ "AlwaysBreakTemplateDeclarations" : "true",
      \ "Standard" : "Auto",
      \ "BreakBeforeBraces" : "GNU"}

" End clang-format Settings }}}

" makeshift Settings {{{
let g:makeshift_chdir = 1
" End makeshift Settings }}}

" Neosnippet Settings {{{
let g:neosnippet#snippets_directory='~/.vimsnippets'
" End Neosnippet Settings }}}

" Pandoc Settings {{{
let g:pandoc#syntax#conceal#use = 0
let g:pandoc#syntax#codeblocks#embeds#langs = ["ruby", "iteratehaskell=lhaskell", "bash=sh", "python", "shell=sh"]
let g:pandoc#syntax#conceal#blacklist = ["block", "codeblock_start", "codeblock_delim"]
let g:pandoc#keyboard#use_default_mappings = 1
let g:pandoc#formatting#mode = "sA"
let g:pandoc#folding#level = 2
let g:pandoc#folding#mode = "relative"
let g:pandoc#after#modules#enabled = ["nrrwrgn", "tablemode", "unite", "neosnippets"]
let g:pandoc#completion#bib#mode = 'citeproc'
let g:pandoc#folding#fold_yaml = 0
"Pandoc Syntax
let g:pandoc#syntax#colorcolumn = 1

if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" End Pandoc Settings }}}

" Tex Mode {{{
let g:tex_conceal = "ab"
" End Tex Mode }}}

" Emmet Settings {{{
let g:user_emmet_leader_key='<leader>e'
" End Emmet Settings }}}

" JsDoc Settings {{{
let g:jsdoc_allow_input_prompt = 1
" End JsDoc Settings }}}

" Gutentags Settings {{{
let g:gutentags_cache_dir = "~/.vim"
" End Gutentags Settings }}}

" pymode Settings {{{
let g:pymode_rope_completion = 0
let g:pymode_lint = 0
let g:pymode_rope_regenerate_on_write = 0
" End pymode Settings }}}

" utilisnips {{{

" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<leader>p"
let g:UltiSnipsListSnippets="<leader>l"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:UltiSnipsSnippetsDir = $HOME."/.vimsnippets"

let g:UltiSnipsSnippetDirectories=["UltiSips", $HOME."/.vimsnippets"]


" End utilisnips }}}

"}}}

" Auto Groups {{{
" Dart filetype {{{
  augroup dart
    au Filetype dart BufWritePre * Neoformat
  augroup END
" End Dart filetype }}}

" TableMode {{{
  autocmd FileType markdown TableModeEnable
" End TableMode }}}

" NeoComplete {{{
" if dein#check_install(["Shougo/neocomplete.vim"]) && !has('nvim')
"   augroup pandoc
"     au FileType pandoc NeoCompleteLock
"   augroup END
" endif
" End NeoComplete }}}

" Autoreload .vimrc {{{
augroup myvimrc
  au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" End Autoreload .vimrc }}}

" Neomake {{{
au BufWritePost * Neomake
" End Neomake }}}

" End Auto Groups }}}
